#pragma once
#include"BaseEnemy.h"
#include<functional>
#include<tuple>
#include<map>
#include "Common.h"
#include "EnemiesEditor.h"
//****************************************************************
// 
// 盾なし通常攻撃の雑魚敵の派生クラス 
// 
//****************************************************************
class ArcherEnemy final :public BaseEnemy
{
    //****************************************************************
    // 
    // 関数
    // 
    //****************************************************************
public:

    ArcherEnemy(GraphicsPipeline& graphics_,
        DirectX::XMFLOAT3 EmitterPoint_/*スポーン位置*/
        , int UniqueId_, ParamGetFunction Function_,  AddBulletFunc Func_
    );
    ~ArcherEnemy();

    void fInitialize() override;
    void fUpdate(GraphicsPipeline& Graphics_, float elapsedTime_) override;
    void fGuiMenu() override;

    void fDamaged(int damage_, float InvinsibleTime_) override;

    void fStopEffect() override;
private:
    // ステートマシンを追加する関数
    void fRegisterFunctions() override;
    //パラメータ初期化関数
    void fParamInitialize();

    //--------------------<各ステートの関数>--------------------//
    void fSpawnInit();   // 登場の初期化
    void fSpawnUpdate(float elapsedTime_, GraphicsPipeline& Graphics_); // 登場の更新処理

    void fIdleInit();   // 待機の初期化
    void fIdleUpdate(float elapsedTime_, GraphicsPipeline& Graphics_); // 待機の更新処理

    void fMoveInit(); //移動の初期化
    void fmoveUpdate(float elapsedTime_, GraphicsPipeline& Graphics_); //移動の更新処理

	void fMoveApproachInit(); //接近移動の初期化
    void fMoveApproachUpdate(float elapsedTime_, GraphicsPipeline& Graphics_); //後退移動の更新処理

    void fMoveLeaveInit(); //接近移動の初期化
    void fMoveLeaveUpdate(float elapsedTime_, GraphicsPipeline& Graphics_); //後退移動の更新処理

    void fSetVernierEffectPos();


    // 弓を引く
    void fAttackBeginInit();
    void fAttackBeginUpdate(float elapsedTime_, GraphicsPipeline& Graphics_);

    //弓引いて待機
    void fAttackPreActionInit();
    void fAttackPreActionUpdate(float elapsedTime_, GraphicsPipeline& Graphics_);

    //弓を放つ
    void fAttackEndInit();
    void fAttackEndUpdate(float elapsedTime_, GraphicsPipeline& Graphics_);

    void fDamagedInit(); //移動の初期化
    void fDamagedUpdate(float elapsedTime_, GraphicsPipeline& Graphics_); //ひるみの更新処理


    // ステートの名前を定義する
    struct  State : public BaseEnemy::StateTag
    {
        inline static const std::string AttackReady = "AttackReady";
        inline static const std::string AttackIdle = "AttackIdle";
        inline static const std::string AttackShot = "AttackShot";
        inline static const std::string Approach = "Approach";
        inline static const std::string Leave = "Leave";
    };
    enum  AnimationName {
        idle,
        walk,
        attack_ready,
        attack_idle,
        attack_shot,
        damage,
    };
    //****************************************************************
   // 　
   // 変数 
   // 
   //****************************************************************
    State mNowState;
    float mStayTimer;
    float mAttackingTime;
    bool mAttack_flg;
    AddBulletFunc mfAddFunc;
    skeleton::bone mVernierBone{  };

    std::unique_ptr<Effect> mVernier_effect;

    //****************************************************************
   // 　
   // 定数 
   // 
   //****************************************************************
    //登場後の待機時間
    const float SPAWN_STAY_TIME = 2.0f;
    //プレイヤーに攻撃を開始する最短距離
    const float AT_SHORTEST_DISTANCE = 30.0f;
    //プレイヤーに攻撃を開始する最長距離
    const float AT_LONGEST_DISTANCE = 40.0f;
};

